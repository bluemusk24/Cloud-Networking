Lecture 1: Setup Cloud Environment for Windows, Ubuntu and Red-Hat Instances

# Create VPC on Amazon Cloud:

* select VPC and more
* autogenerated name : network-bootcamp
* IPv4 CIDR block : 10.200.123.0/24 (enough for the whole bootcamp)
* IPv6 CIDR block : No
* Number of Availability Zones (AZs) : 1
* Number of public subnets : 1
* Number of private subnets : 1
* NAT gateways : None
* VPC endpoints : None
* DNS options : Enable both
* Check the Preview and click create VPC. Wait for few seconds to complete creation

# Launch EC2 Instances:

* create 2 key-pair to login to instances:
- name: networkbootcampkey-ppk, select .ppk  --> For use with PuTTY
- name: networkbootcampkey-pem, select .pem  --> For use with OpenSSH

* Launch Windows Server:
- Amazon Machine Image (AMI) : Microsoft Windows Server 2025 Base 
- Instance type : t3 large
- Key pair name : networkbootcampkey-pem

* Network Settings Edit
- select created VPC (network-bootcamp-vpc)
- select created Public Subnet 
- Auto-assign public IP : Enabled

* create security group 
- name : allow-login
- Inbound Security Group Rules (type : rdp, Source type : MY IP)  --> when creating security group for the first time

* Security group rule 2 Edit 
- (Type : All Traffic, Source type : Custom, Source : 10.200.123.0/24) --> This allows any ingress/inbounds from any host sharing the same VPC with this instance. --> when creating security group for the first time

* Configure storage : 30gig
- Click Launch Server

# Note: All testing will be done via the Private Subnet (private-nic), while the Public Subnet (public-nic) will be used for connection to the instances.

* Go to Network Interfaces, click network interface
- Description : windows-server-private-nic
- Subnet : select the private subnet name
- Security groups : click created security group (allow-login) for connection to other private interfaces in the VPC
- Click create network interface, click view network interface
- Click Actions and attach  to : (VPC : network-bootcamp-vpc, Instance : created windows server)
- You should see Successfully attached network interface eni-08081d61ee819b6cf to instance i-00a34f81157dfa568 at the top.
- Head to created Windows EC2 Server, click Networking to see created Networking Interfaces (both Public and Private) addresses

* Connect to Windows Instance
- click connect, RDP client, download remote desktop file (you will a downloaded RDP windows file)
- click Get password, upload downloaded .pem file, click decrpt password.
- copy decrypted password (iTUi1DD60kp9qf=N@63w0e68nc9MlM2V)
- run downloaded RDP Windows file, paste the decrypted password and click ok, click yes --> you should see a created Administrator instance
- click close (X) to disconnect.

* Launch EC2 Ubuntu Server:
- Name : ubuntu-test-server
- Amazon Machine Image (AMI) : Ubuntu Server 24.04 LTS(HVM), SSD Volume Type
- Key pair name : networkbootcampkey-ppk

* Network Settings Edit
- select created VPC (network-bootcamp-vpc)
- select created Public Subnet 
- Auto-assign public IP : Enabled
- Select already created security group

* Configure storage : 16gig
- Click Launch Server

* Go to Network Interfaces, click network interface
- Description : ubuntu-server-private-nic
- Subnet : select the private subnet name
- Security groups : click created security group (allow-login) for connection to other private interfaces in the VPC
- Click create network interface, click view network interface
- Click Actions and attach  to : (VPC : network-bootcamp-vpc, Instance : created ubuntu-test-server). click Attach
- You should see Successfully attached network interface eni-0205b662da8a6da43 to instance i-0e3b6e9ad47641bf2
- Head to created Ubuntu EC2 Server, click Networking to see created Networking Interfaces (both Public and Private) addresses

* Putty and Pageant Download
- google putty, click https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html
- download putty.exe and pageant.exe (to load keys for putty pass through) --> for Windows system
- open pageant.exe, click add key encrypted, add .ppk file, close.
- open putty, click SSH, Auth, check Allow Agent forwarding
- on Putty, click Session, copy and paste EC2 ubuntu-test-server Public IPv4 address in the HostName IP session on Putty, click open. You should see an opened Putty terminal.

* Here, I could not connect to Putty. So, I had to edit security group of the ubuntu-test-server
- click Security on the server
- Edit inbound rules, add rules (Type : SSH, Source : My IP), click save rules.
- Try connect to ubuntu-test-server again via Putty. 
- Click Accept on the pop up server. 
- Type ubuntu to login and authenticate with the uploaded key to pageant.

* Launch EC2 RedHat Server: 
- same procedures as Ubuntu server except you login and authenticate with ec2-user on Putty.
- Also, change the name on the Network Interface to redhat-server-private-nic. this distinguishes it from ubuntu-server-private-nic created above

* Allocation of Public IP to the instances when shut off and turned back on (not necessary bcos you can always use generated IPv4 address):
- click Elastic IP
- Allocate Elastic IP address, click Allocate
- check the box, click actions, associate Elastic Address, select instance, select IP. click associate. (I got error here though)

Lecture 2: Automate VPC Deployment with CFN (Cloud Formation)

# Note: to upload an image from Readme in VScode to readme in GitHub repo, use this: ![](relative path of image)

* Clone Git repo on VSC
- create a virtual env with conda and activate the environment, code . to open vscode 
- git clone https://github.com/bluemusk24/Cloud-Networking.git --> clone the GitHub repo on vscode and cd.

* Create an Issue on the GitHub Repo
- create an issue with a title and a description. click create.
- click create a branch, check locally. Copy the below git codes and paste on vscode cloned terminal
git fetch origin
git checkout 1-create-cfn-template-for-setting-up-vpc-on-aws

* create template.yaml 
- ask chatGPT to create a CFN template to set up VPC with the VPC specs in Lecture 1

* Deploy on AWS Cloud Formation
- can you create me a bash script that will deploy the CFN template?
- Save the create file above as `deploy-vpc.sh` in the same directory as your template.yml
- aws sts get-caller-identity  --> inspect if AWS is installed. If installed, run below codes to deploy. Note: I did not do it bcos i already have VPC created manually on AWS. Terraform can also be used for this
- chmod u+x deploy-vpc.sh  --> do this once to make it executable
- ./deploy-vpc.sh

* push to GitHub issue branch
- git status
- git branch
- git add <name of files> eg. git add template.yml deploy-vpc.sh
- git status
- git commit -m 'commit to issue branch'
- git push https://github.com/bluemusk24/Cloud-Networking.git <name of branch> (eg. 1-create-cfn-template-for-setting-up-vpc-on-aws) --force
- when push to GitHub branch, click compare and pull request, make a description of what you did on the pull request and if needed, merge to the main branch. This is necessary to notify your team members. when merged to min branch, issues and pull request are closed.


Lecture 3: IP Address Management

* Windows Server
- Here, we explore the created EC2 windows server. Connect to the server as done in lecture 1, open settings, Network and navigate through created Public and Private Subnets. do not mess with anything in the Public Subnet bcos it's connected to AWS. Private Subnet can be manually adjusted if you want to. DHCP helps to allocate IP addresses to different servers without manually doing it.
- Also, open command prompt/terminal, type ipconfig and ipfconfig /all --> to see more information about the created Subnets 

* Ubuntu Server and RedHat Server
- ifconfig, ip addr, ip route --> these Linux commands give details about Ubuntu server 
- sudo netplan status, sudo netplan try --> details about the ethernet connections (enX0, enX1)


Lecture 4: Install Packet Tracer

* Cisco Packet Tracer download link --> https://www.netacad.com/resources/lab-downloads?courseLang=en-US


Lecture 5: Packet Tracer Lab Simulation

* Connect a PC to a Switch, a Server to a Switch and a Router to a Switch via cables.

* Configure the router:
- Click the Router, go to CLI and type the following below:
- no, press enter, en, 
- conf t press enter,   --> starting to configure
- int gi0/0/0 press enter,  --> gateway cables ethernet for the router
- ip address 192.168.0.1 255.255.255.0  --> we use this fixed IP and Subnet Mask bcos the Router is the gateway to network. No DHCP needed here to manage IP
- no shut --> turn on the Router interface. Note the Ethernet Cable on the Router turns green here; also this information on the Router CLI (changed state to up). 
- ctrl Z --> Stop configuration, press enter and close Router CLI.

* Configure the Server using DHCP
- Click on Server, go to config, Settings
Gateway/DNS IPv4:
- Display name: Server0
- Default Gateway: same IP as the Router (192.168.0.1)
- DNS Server: same IP as the Router (192.168.0.1)
- Click FastEthernet0
IP Configuration:
- IPv4 Address: 192.168.0.100
- Subnet Mask: 255.255.255.0
Go to Services, click DHCP --> for multiple IP address connection to the Router network
- Pool Name: dhcp
- Default Gateway: same IP as the Router (192.168.0.1)
- DNS Server: same IP as the Router (192.168.0.1)
- Start IP Address: 192 . 168 . 0 . 101 ---> 101 is used bcos FasyEthernet0 has beginning IPv4 (192.168.0.100). Subnet Mask remains the same
- Maximum umber of Users: 100
- Click Save --. this saves the configuration for DHCP
- check the Turn Service on circle

* Click Simulation on Packet tracer

* Configure the PC to request an IPv4 address:
- Go to Desktop, click command prompt
type following:
- ipconfig --> it shows no IP address
- ipconfig /renew --> the PC is triggered, click to view triggered messages (Packet frame to be sent )
- On the Simulation, click forward --> note the Packet frame move from PC to Switch. Click Switch to view messages
- On the Simulation, click forward --> the switch broadcasts Packet frame to both Router and Server
- On the Simulation, click forward --> packet frame goes back to Switch
- On the Simulation, click forward -->  Switch broadcast to both PC and Router
- click play on Simulation. open the command prompt terminal to see the assigned IP address and Subnet mask to the PC below:
   IP Address......................: 192.168.0.101
   Subnet Mask.....................: 255.255.255.0
   Default Gateway.................: 192.168.0.1
   DNS Server......................: 192.168.0.1
- ipconfig /release --> release the attached IP on the PC when done acquiring. it takes the default PC IP back to this:
   IP Address......................: 0.0.0.0
   Subnet Mask.....................: 0.0.0.0
   Default Gateway.................: 0.0.0.0
   DNS Server......................: 0.0.0.0


Lecture 6: Windows Networking Tools and Troubleshooters

- ipconfig /? --> view info on what you can do with different ipconfig commands. eg ipconfig /renew, ipconfig /all, ipconfig /flushdns
- ping /? --> view info on what you can do with different ping commands. eg. ping -t www.google.com, ctrl c to stop persistence
- tracert --> to know where a problem is when a site becomes inaccessible. eg tracert www.google.com
- nslookup --> to look up VPC and address of the DNS server. run www.cnn.com to get the domain of the server
- netstat --> this shows active connection
- netstat /? --> view info on what you can do with different netstat commands. eg nestsat r (looks for routing table of the windows box). 
- route --> view info on what you can do with different route commands. eg route print (looks for routing table of the windows box)


Lecture 7: Windows Firewall Rules

- python -m http.server 8000 --> start python server, allow public network. Always cd to the directory you want to start the server from
- localhost:8000 --> to view the server and all directories in your local machine.
- Inbound and Outbound rules can be set as Windows Firewall rules to prevent/admit access 

Lecture 8: Linux Networking Tools (Ubuntu or RedHat)

- cat /etc/hosts  --> view localhost on Ubuntu or Redhat
- ping localhost/or any IP address from the above.
- netstat --> this shows active connection
- curl --help (all) --> view info on what you can do with different curl commands. It can be used with any API. eg curl https://localhost:8000'
- curl https://goal.com/get --> curl with any link to get html details. I used goal.com here and you can use get with or without it
- python3 -m http.server 8000& --> start python server. & gives access to the terminal when server is started. It can be removed though
- ps --> view running servers
- lsof -i --> view running or terminated Python server
- kill  793 --> the Python server with TAG 793
- dig google.com


Lecture 9: Linux Firewall Rules

* Ubuntu Firewall Rules (UFW)
- sudo apt search ufw  --> check if UFW is installed
- sudo ufw status --> by default, it's inactive.
- sudo ufw enable --> allow/deny inbound and outbound rules from anywhere (any ports)
- man ufw --> see details of what to allow or deny access and their specified ports.


Lecture 10: Cloud Networking

- This lecture was creating different VPCs, Subnets, NAT Gateway, Route Table in different availability zones. The VPCs were peer connected to allow communications via route table. The 3 major cloud platforms were considered.


Lecture 11: Cisco Modelling Labs (CML)

- A Cisco emulated lab that runs software - eg router software, switch software in a virtualized environment. 
- CML is better than Packet Tracer.
- CML can run web servers and gives a GUI (graphical user interface), all in a virtual environment


Lecture 11: NAT (Network Access Translation)

* NAT was created to:
- make up for IPv4 addresses when there was a limit of the addresses.
- to provide connectivity between networks that use the same IPs.
- to obscure networks.


